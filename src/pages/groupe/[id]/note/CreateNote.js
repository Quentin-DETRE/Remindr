import Head from "next/head";
import { useState, useEffect } from 'react';
import axios from "axios";
import Link from 'next/link'
import { useRouter } from "next/router";
import { useSession } from "next-auth/react"

export async function getServerSideProps({ query }) {

    const id = query.id;
  
  
    const groupe = await prisma.groupe.findUnique({
      where: {
        id: parseInt(id)
      },
    });
  
    const groupeUser = await prisma.GroupeUser.findMany({
      where: {
        id_groupe: parseInt(groupe.id),
      }
  
    })
    return {
      props: {
        groupeUser: JSON.parse(JSON.stringify(groupeUser)),
      }, // will be passed to the page component as props
    }
  }


export default function CreateGroupe({groupeUser}) {
    const [content, setContent] = useState('');
    const [title, setTitle] = useState('');
    const [dateT, setDateTime] = useState('');
    const [colorHex, setColor] = useState('')
    const router = useRouter()
    const { data: session } = useSession();
    const { id } = router.query

    useEffect(() => {
        var canAccess = false;
        if (session) {
            groupeUser.forEach(groupUser => {
                if (session.user.id == groupUser.id_user) {
                  canAccess = true;
                }
              });
              if (!canAccess) {
                router.push("/");
              }
        }
    }, [session])

    const handleSubmit = (event) => {
        event.preventDefault();

        const data = { title, content, dateT, colorHex, id };
        axios.post('/api/note', data)
            .then((response) => {
                console.log(response.data);
            })
            .catch((error) => {
                console.error(error);
            });

        router.push(`/groupe/${id}/`);

    }
    return (
        <>
            <Head>
                <title>Créer une note</title>
                <meta lang='fr' />
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="preconnect" href="https://fonts.googleapis.com" />
                <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
                <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet"></link>
                <link rel="icon" href="/aaaa.webp" />
            </Head>

            <main>
                <div className="navbar">
                    <Link href={`/groupe/${id}`}><button className="sign">Retour</button></Link>
                    <h1>Créer un Remindr</h1>
                    <h3>Remindr</h3>
                </div>
                <div className="formContainer">
                    <form onSubmit={handleSubmit}>
                        <h2>Titre du Remindr</h2>
                        <input type="text" value={title} className="NameInput" required onChange={(e) => setTitle(e.target.value)}></input>
                        <h2>Description du Remindr</h2>
                        <textarea value={content} className="DescInput" required onChange={(e) => setContent(e.target.value)}></textarea>
                        <h2>Date et couleur du Remindr</h2>
                        <input value={dateT} type="datetime-local" className="DateInput" required onChange={(e) => setDateTime(e.target.value)}></input>
                        <input value={colorHex} type="color" list="presetColors" className="ColorInput" required onChange={(e) => setColor(e.target.value)} /><datalist id="presetColors"><option>#E02121</option><option>#2151DC</option><option>#24D53C</option></datalist>
                        <button type="submit" className="sign">Créer</button>
                    </form>
                </div>
            </main>
        </>
    )
}